import streamlit as st
import pandas as pd
import numpy as np
import yfinance as yf
import plotly.graph_objects as go
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import PolynomialFeatures
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error
import datetime

# sidebar navigation
st.set_page_config(page_title="Quant Finance AI", layout="wide")

st.sidebar.title("üìä Navigation")
page = st.sidebar.radio("Go to", ["üè† Home", "üìà Trading Tool"])

# mainpage
def main_page():
    st.title("Welcome to Belfort AI!")
    st.markdown("""
        Welcome to **Belfort AI**, your intelligent trading robo-advisor powered by AI and data analytics.
        
        ## Project Overview
        
        Welcome to **Belfort AI**, your cutting-edge AI-powered **robo-advisor** for smart, data-driven trading decisions.  
        Belfort AI harnesses machine learning, financial analytics, and real-time data to help you **identify opportunities**, **predict price action**, and **optimize your trading strategy** ‚Äî all in one place.

        üîç Whether you're a seasoned investor or just getting started, **Belfort AI** gives you the insights and tools to trade with confidence.

        üíº This is not just a tool ‚Äî it's your partner in navigating the market intelligently.
        
        ---
        ## üì¢ Disclaimer
        This project and its associated AI stock prediction tool are for **informational and educational purposes only**.

        - The predictions and analyses generated by this model do **not** constitute financial, investment, or trading advice.
        - All investments carry risk; past performance is not indicative of future results.
        - Please consult with a qualified financial advisor before making any investment decisions.

        ---
        ## üß† Problem Identification
        - **Problem Definition:** We're building an AI tool that can predict the price action of stocks, suggest trades (including entry, take profit, and stop loss), and eventually automate those trades ‚Äî all with the goal of reducing human error, improving consistency, and optimizing risk management.
        
        - **Scope:** This project uses weekly stock data, machine learning (regression models), and APIs like Alpaca or Interactive Brokers to simulate trades and automate decisions.
       
       - **Constraints:** We're working within a 10-week timeline and purposely avoiding subjective inputs like news or social sentiment to keep everything data-driven.
       
       - **Success Criteria:** The AI should consistently suggest profitable trades, aiming for a 70‚Äì80% success rate, with each position targeting a gain between 0.33% and 2%, and a strong risk-reward ratio of 2:1 or 3:1.

        ## üìä Data Pipeline
        - **Sources:** Yahoo Finance API via `yfinance`
                
        - **Features:** Volume (number of shares traded), return (gain/loss over a given period of time), trends (moving averages), risk management, key price levels, volatility (standard deviation).
                
        - **Model & Data Cleaning:** Polynomial regression with feature engineering.

        ---
        > Developed by **Sami El-Khoury Awaragi**, **Camelia Ladjeroud**, **Azan Niazi**, and **Tristan Thai**.
    """)

# Load S&P 500 symbols
@st.cache_data
def load_symbols():
    url = "https://raw.githubusercontent.com/datasets/s-and-p-500-companies/master/data/constituents.csv"
    df = pd.read_csv(url)
    return df["Symbol"].tolist()

stock_list = load_symbols()

# belfort page
def trading_tool():
    st.title("üìà Belfort AI")

    symbol = st.selectbox("Pick a stock (or type your own below):", [""] + stock_list)
    start_date = st.date_input("Start Date", pd.to_datetime("2022-01-01"))
    end_date = st.date_input("End Date", pd.to_datetime("today"))

    if start_date >= end_date:
        st.error("Start date must be before end date.")
        st.stop()

    if st.button("Run Analysis"):
        with st.spinner("Fetching data..."):
            df = yf.download(symbol, start=start_date, end=end_date)

        if df.empty:
            st.error("No data found.")
            st.stop()

        # current and past indicators
        st.write('Current')
        st.write(df)

        df.reset_index(inplace=True)
        df["Date"] = pd.to_datetime(df["Date"])
        df.set_index("Date", inplace=True)

        df["SMA_7"] = df["Close"].rolling(window=7).mean()
        df["SMA_30"] = df["Close"].rolling(window=30).mean()
        df["Daily Return"] = df["Close"].pct_change()
        df["Volatility"] = df["Daily Return"].rolling(window=30).std()
        df["Resistance"] = df["High"].rolling(window=7).max()
        df["Support"] = df["Low"].rolling(window=30).min()

        st.write('After')
        st.write(df)

        # decision logic
        def make_decision(data):
            if len(data) < 30:
                return "HOLD", None, None, None, None, []
            latest = data.iloc[-1]
            conditions = []
            try:
                sma_7, sma_30 = float(latest["SMA_7"]), float(latest["SMA_30"])
                vol, close, support = float(latest["Volatility"]), float(latest["Close"]), float(latest["Support"])
            except:
                return "HOLD", None, None, None, None, []

            conditions.append("‚úÖ SMA over 7 days > SMA over 30 days" if sma_7 > sma_30 else "‚ùå SMA over 7 days ‚â§ SMA over 30 days")
            conditions.append("‚úÖ Volatility < 2%" if vol < 0.02 else "‚ùå Volatility ‚â• 2%")
            conditions.append("‚úÖ Close > Support" if close > support else "‚ùå Close ‚â§ Support")

            if all(c.startswith("‚úÖ") for c in conditions):
                sl = support
                rr_2_tp = close + 2 * (close - sl)
                rr_3_tp = close + 3 * (close - sl)
                rr_best = 3 if rr_3_tp - close > rr_2_tp - close else 2
                tp = rr_3_tp if rr_best == 3 else rr_2_tp
                return "BUY", close, tp, sl, rr_best, conditions

            sl = close * 0.98
            tp = close + 2 * (close - sl)
            return "HOLD", close, tp, sl, 2, conditions

        decision, entry, tp, sl, rr, checks = make_decision(df)

        # trading decision output
        st.subheader("üìå Trading Decision")
        for check in checks:
            st.markdown(f"- {check}")

        entry_fmt = f"${entry:,.0f}" if entry else None
        tp_fmt = f"${tp:,.0f}" if tp else None
        sl_fmt = f"${sl:,.0f}" if sl else None

        if decision == "BUY":
            st.success(f"üí∞ **BUY**")
            st.markdown(f"**RR**: {rr}:1")
            st.markdown(f"**Entry**: {entry_fmt}")
            st.markdown(f"**TP**: {tp_fmt}")
            st.markdown(f"**SL**: {sl_fmt}")
        else:
            st.warning(f"‚ö†Ô∏è HOLD! Not optimal to buy.")
            st.markdown(f"**RR**: {rr}:1")
            if entry:
                st.markdown(f"**Hypothetical Entry**: {entry_fmt}")
                st.markdown(f"**TP**: {tp_fmt}")
                st.markdown(f"**SL**: {sl_fmt}")

        # stock chart
        st.subheader("üìâ Stock Chart")
        fig = go.Figure()
        fig.add_trace(go.Scatter(x=df.index, y=df["SMA_7"], name="SMA 7", line=dict(color="green", dash="dash")))
        fig.add_trace(go.Scatter(x=df.index, y=df["SMA_30"], name="SMA 30", line=dict(color="red", dash="dash")))
        fig.update_layout(title=f"{symbol} Price", xaxis_title="Date", yaxis_title="Price",
                          width=1100, height=500, hovermode="x unified")
        st.plotly_chart(fig, use_container_width=False)

        # tradingview embed
        st.subheader("üì∫ Live Chart")
        tradingview_symbol = "TVC:DJI" if symbol == "DJI" else f"NASDAQ:{symbol}"
        tradingview_html = f"""
        <iframe src="https://www.tradingview.com/embed-widget/symbol-overview/?locale=en#%7B%22symbols%22%3A%5B%5B%22{tradingview_symbol}%22%5D%5D%2C%22width%22%3A%22100%25%22%2C%22height%22%3A300%2C%22locale%22%3A%22en%22%2C%22colorTheme%22%3A%22dark%22%7D"
        width="100%" height="300" frameborder="0"></iframe>
        """
        st.markdown(tradingview_html, unsafe_allow_html=True)

        # predicted stock price w/ polynomial regression
        df['Target'] = df['Close'].shift(-1)
        df.dropna(inplace=True)
        features = ['SMA_7', 'SMA_30', 'Volatility', 'Resistance', 'Support']
        X = df[features]
        y = df['Target']

        poly = PolynomialFeatures(degree=2)
        X_poly = poly.fit_transform(X)

        X_train, X_test, y_train, y_test = train_test_split(X_poly, y, test_size=0.2, shuffle=False)
        model = LinearRegression()
        model.fit(X_train, y_train)
        y_pred = model.predict(X_test)
        mse = mean_squared_error(y_test, y_pred)

        st.write(f"Mean Squared Error: {mse:.2f}")
        fig = go.Figure()
        fig.add_trace(go.Scatter(x=df.index[-len(y_test):], y=y_test, mode='lines', name='Actual Price'))
        fig.add_trace(go.Scatter(x=df.index[-len(y_pred):], y=y_pred, mode='lines', name='Predicted Price'))
        fig.update_layout(title=f"{symbol} Polynomial Regression Price Prediction",
                          xaxis_title="Date", yaxis_title="Price",
                          width=1100, height=500, hovermode="x unified")
        st.plotly_chart(fig)

        # model metrics
        st.subheader("üìä Model Metrics")

        # Predictions on full dataset for complete metrics
        y_full_pred = model.predict(poly.transform(X))

        r2 = r2_score(y, y_full_pred)
        adjusted_r2 = 1 - (1 - r2) * ((len(y) - 1) / (len(y) - X_poly.shape[1] - 1))
        rmse = np.sqrt(mean_squared_error(y, y_full_pred))
        mae = mean_absolute_error(y, y_full_pred)
        mape = np.mean(np.abs((y - y_full_pred) / y)) * 100

        st.write(f"**R¬≤ Score**: {r2:.4f}")
        st.write(f"**Adjusted R¬≤**: {adjusted_r2:.4f}")
        st.write(f"**Root Mean Squared Error (RMSE)**: {rmse:.4f}")
        st.write(f"**Mean Absolute Error (MAE)**: {mae:.4f}")
        st.write(f"**Mean Absolute Percentage Error (MAPE)**: {mape:.2f}%")


# footer
footer = """
<style>
.footer {
position: fixed;
left: 0;
bottom: 0;
width: 100%;
background-color: #eeeeee;
color: #000000;
text-align: center;
padding: 5px 0;
}
</style>
<div class="footer">
<p>Developed by Sami El-Khoury Awaragi, Camelia Ladjeroud, Azan Niazi & Tristan Thai</p>
</div>
"""
st.markdown(footer, unsafe_allow_html=True)

# route to the selected page
if page == "üè† Home":
    main_page()
elif page == "üìà Trading Tool":
    trading_tool()
